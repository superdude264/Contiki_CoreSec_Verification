const AES: Function;
usertype T;
const Empty: T;
const k: Function;

protocol APKES(U,V)
{
    role U
    {
        # Use "fresh" for randomly-generated values
        fresh Ru: Nonce; 
        
        # HELLO
        send_1(U,V, Ru); 

        # HELLOACK
        var Rv: Nonce;
        recv_2(V,U, {Ru,Rv,k(V,U) }sk(V) ); 

        # ACK
        macro pairwiseKey = AES(k(V, U), Ru, Rv);
        send_3(U,V, {pairwiseKey}sk(U) ); 

        # Claims
        claim_i1(U,Secret,k(V, U)); # Need this?
        claim_i2(U,Secret,pairwiseKey);
        claim_i3(U,Niagree); # Need both agree & synch?
        claim_i4(U,Nisynch);
    }

    role V
    {
        fresh Rv: Nonce;
        
        # HELLO msg
        var Ru: Nonce;
        recv_1(U,V, Ru);

        # HELLOACK
        send_2(V,U, {Ru,Rv,k(V, U)}sk(V) );

        # ACK
        macro pairwiseKey = AES(k(V, U), Ru, Rv);
        recv_3(U,V, {pairwiseKey}sk(U) ); 

        # Claims
        claim_i1(V,Secret,k(V, U)); # Need this?
        claim_i2(V,Secret,pairwiseKey);
        claim_i3(V,Niagree); # Need both agree & synch?
        claim_i4(V,Nisynch);
    }
}
